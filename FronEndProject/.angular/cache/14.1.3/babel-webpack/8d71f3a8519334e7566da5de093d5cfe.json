{"ast":null,"code":"import _asyncToGenerator from \"F:/GITHUB/PERSONAL/FronEndProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BACKEND_URL } from \"../constants/backend\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.loggedIn = false;\n  }\n\n  login(authentication) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // const res = await fetch(BACKEND_URL + '/api/authentication/authenticate', {\n      //   method: \"POST\",\n      //   body: JSON.stringify(authentication),\n      //   headers: { 'Content-Type': 'application/json' }\n      // })\n      const token = yield fetch(BACKEND_URL + '/api/authentication/authenticate', {\n        method: \"POST\",\n        body: JSON.stringify(authentication),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (!res.ok) return;\n        return res.text();\n      }); //console.log(res.text(), 'soy el token');\n\n      debugger;\n      console.log(token);\n      if (!token) return false;\n      console.log(token);\n\n      _this.setSession(token);\n\n      return true;\n    })();\n  }\n\n  isLoggedIn() {\n    return this.loggedIn;\n  }\n\n  getSession() {\n    const item = localStorage.getItem('session') || 'invalid';\n\n    if (item !== 'invalid') {\n      return JSON.parse(item);\n    }\n\n    return {\n      expiresIn: '',\n      token: ''\n    };\n  }\n\n  setSession(token, expiresTimeHours = 24) {\n    const date = new Date();\n    date.setHours(date.getHours() + expiresTimeHours);\n    const session = {\n      expiresIn: new Date(date).toISOString(),\n      token\n    };\n    console.log(session);\n    localStorage.setItem('session', JSON.stringify(session)); //window.location.reload();\n  }\n\n  getMe() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = yield fetch('', {\n        headers: {\n          Authorization: _this2.getSession().token\n        }\n      });\n      return yield res.json();\n    })();\n  }\n\n  resetSession() {\n    localStorage.removeItem('session');\n    this.loggedIn = false;\n    window.location.reload();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAAQA,WAAR,QAA0B,sBAA1B;;AAKA,OAAM,MAAOC,WAAP,CAAkB;EAEtBC;IAGQ,gBAAoB,KAApB;EAHS;;EAKXC,KAAK,CAACC,cAAD,EAAuB;IAAA;;IAAA;MAChC;MACA;MACA;MACA;MACA;MAEA,MAAMC,KAAK,SAASC,KAAK,CAACN,WAAW,GAAG,kCAAf,EAAmD;QAC1EO,MAAM,EAAE,MADkE;QAE1EC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,cAAf,CAFoE;QAG1EO,OAAO,EAAE;UAAC,gBAAgB;QAAjB;MAHiE,CAAnD,CAAL,CAIjBC,IAJiB,CAIXC,GAAD,IAAQ;QACd,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;QACb,OAAOD,GAAG,CAACE,IAAJ,EAAP;MACD,CAPmB,CAApB,CAPgC,CAgBhC;;MACA;MACAC,OAAO,CAACC,GAAR,CAAYZ,KAAZ;MAEA,IAAG,CAACA,KAAJ,EAAW,OAAO,KAAP;MAEXW,OAAO,CAACC,GAAR,CAAYZ,KAAZ;;MACA,KAAI,CAACa,UAAL,CAAgBb,KAAhB;;MACA,OAAO,IAAP;IAxBgC;EAyBjC;;EAEDc,UAAU;IACR,OAAO,KAAKC,QAAZ;EACD;;EAEDC,UAAU;IACR,MAAMC,IAAI,GAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,SAAxD;;IACA,IAAIF,IAAI,KAAK,SAAb,EAAwB;MACtB,OAAOb,IAAI,CAACgB,KAAL,CAAWH,IAAX,CAAP;IACD;;IACD,OAAO;MAAEI,SAAS,EAAE,EAAb;MAAiBrB,KAAK,EAAE;IAAxB,CAAP;EACD;;EAEDa,UAAU,CAACb,KAAD,EAAasB,mBAA2B,EAAxC,EAA0C;IAClD,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;IACAD,IAAI,CAACE,QAAL,CAAcF,IAAI,CAACG,QAAL,KAAkBJ,gBAAhC;IAEA,MAAMK,OAAO,GAAa;MACxBN,SAAS,EAAE,IAAIG,IAAJ,CAASD,IAAT,EAAeK,WAAf,EADa;MAExB5B;IAFwB,CAA1B;IAKAW,OAAO,CAACC,GAAR,CAAYe,OAAZ;IAEAT,YAAY,CAACW,OAAb,CAAqB,SAArB,EAAgCzB,IAAI,CAACC,SAAL,CAAesB,OAAf,CAAhC,EAXkD,CAYlD;EACD;;EAEKG,KAAK;IAAA;;IAAA;MACT,MAAMtB,GAAG,SAASP,KAAK,CAAC,EAAD,EAAK;QAC1BK,OAAO,EAAE;UACPyB,aAAa,EAAE,MAAI,CAACf,UAAL,GAAkBhB;QAD1B;MADiB,CAAL,CAAvB;MAKA,aAAaQ,GAAG,CAACwB,IAAJ,EAAb;IANS;EAOV;;EAEDC,YAAY;IACVf,YAAY,CAACgB,UAAb,CAAwB,SAAxB;IACA,KAAKnB,QAAL,GAAgB,KAAhB;IACAoB,MAAM,CAACC,QAAP,CAAgBC,MAAhB;EACD;;AA1EqB;;;mBAAXzC;AAAW;;;SAAXA;EAAW0C,SAAX1C,WAAW;EAAA2C,YAFV","names":["BACKEND_URL","AuthService","constructor","login","authentication","token","fetch","method","body","JSON","stringify","headers","then","res","ok","text","console","log","setSession","isLoggedIn","loggedIn","getSession","item","localStorage","getItem","parse","expiresIn","expiresTimeHours","date","Date","setHours","getHours","session","toISOString","setItem","getMe","Authorization","json","resetSession","removeItem","window","location","reload","factory","providedIn"],"sourceRoot":"","sources":["F:\\GITHUB\\PERSONAL\\FronEndProject\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Ilogin} from \"../interfaces/login\";\r\nimport {ISession} from \"../interfaces/session\";\r\nimport {BACKEND_URL} from \"../constants/backend\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor() { }\r\n\r\n\r\n  private loggedIn: boolean = false;\r\n\r\n  async login(authentication: Ilogin): Promise<boolean> {\r\n    // const res = await fetch(BACKEND_URL + '/api/authentication/authenticate', {\r\n    //   method: \"POST\",\r\n    //   body: JSON.stringify(authentication),\r\n    //   headers: { 'Content-Type': 'application/json' }\r\n    // })\r\n\r\n    const token = await fetch(BACKEND_URL + '/api/authentication/authenticate', {\r\n      method: \"POST\",\r\n      body: JSON.stringify(authentication),\r\n      headers: {'Content-Type': 'application/json'}\r\n    }).then((res) => {\r\n      if (!res.ok) return\r\n      return res.text()\r\n    })\r\n\r\n    //console.log(res.text(), 'soy el token');\r\n    debugger\r\n    console.log(token)\r\n\r\n    if(!token) return false\r\n\r\n    console.log(token)\r\n    this.setSession(token);\r\n    return true;\r\n  }\r\n\r\n  isLoggedIn(){\r\n    return this.loggedIn;\r\n  }\r\n\r\n  getSession(): ISession {\r\n    const item: string = localStorage.getItem('session') || 'invalid';\r\n    if (item !== 'invalid') {\r\n      return JSON.parse(item);\r\n    }\r\n    return { expiresIn: '', token: '' };\r\n  }\r\n\r\n  setSession(token: any, expiresTimeHours: number = 24) {\r\n    const date = new Date();\r\n    date.setHours(date.getHours() + expiresTimeHours);\r\n\r\n    const session: ISession = {\r\n      expiresIn: new Date(date).toISOString(),\r\n      token,\r\n    };\r\n\r\n    console.log(session)\r\n\r\n    localStorage.setItem('session', JSON.stringify(session));\r\n    //window.location.reload();\r\n  }\r\n\r\n  async getMe() {\r\n    const res = await fetch('', {\r\n      headers: {\r\n        Authorization: this.getSession().token!,\r\n      },\r\n    });\r\n    return await res.json();\r\n  }\r\n\r\n  resetSession() {\r\n    localStorage.removeItem('session');\r\n    this.loggedIn = false;\r\n    window.location.reload();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}